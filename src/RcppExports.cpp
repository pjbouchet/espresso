// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dt_norm
NumericVector dt_norm(NumericVector x, NumericVector location, NumericVector scale, NumericVector L, NumericVector U, bool do_log);
RcppExport SEXP _espresso_dt_norm(SEXP xSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP LSEXP, SEXP USEXP, SEXP do_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type location(locationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type U(USEXP);
    Rcpp::traits::input_parameter< bool >::type do_log(do_logSEXP);
    rcpp_result_gen = Rcpp::wrap(dt_norm(x, location, scale, L, U, do_log));
    return rcpp_result_gen;
END_RCPP
}
// rt_norm
NumericVector rt_norm(int n, NumericVector location, NumericVector scale, NumericVector L, NumericVector U);
RcppExport SEXP _espresso_rt_norm(SEXP nSEXP, SEXP locationSEXP, SEXP scaleSEXP, SEXP LSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type location(locationSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type L(LSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(rt_norm(n, location, scale, L, U));
    return rcpp_result_gen;
END_RCPP
}
// d_Binom
NumericVector d_Binom(NumericVector x, int size, NumericVector prob, bool do_log);
RcppExport SEXP _espresso_d_Binom(SEXP xSEXP, SEXP sizeSEXP, SEXP probSEXP, SEXP do_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type do_log(do_logSEXP);
    rcpp_result_gen = Rcpp::wrap(d_Binom(x, size, prob, do_log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_espresso_dt_norm", (DL_FUNC) &_espresso_dt_norm, 6},
    {"_espresso_rt_norm", (DL_FUNC) &_espresso_rt_norm, 5},
    {"_espresso_d_Binom", (DL_FUNC) &_espresso_d_Binom, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_espresso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
